///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Выполнить установку. Если указано имя пакета, происходит установка из хаба или из файла. В обратном случае устанавливаются зависимости текущего пакета по файлу packagedef.");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-all", "Установить все пакеты, зарегистрированные в хабе");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-f", "Указать файл из которого нужно установить пакет. Поддерживает указание маски файла для пакетной установки");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-l", "Установить пакеты в локальный каталог oscript_modules");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-dest", "Переопределить стандартный каталог в который устанавливаются пакеты (вместо oscript_modules)");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ИмяПакета", "Имя пакета в хабе. Чтобы установить конкретную версию, используйте ИмяПакета@ВерсияПакета");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
	УстановитьПакет(ПараметрыКоманды);
	Возврат 0;
КонецФункции

Процедура УстановитьПакет(Знач ЗначенияПараметров) Экспорт
	
	РежимУстановки = РежимУстановкиПакетов.Глобально;

	Если ЗначенияПараметров["-l"] = Истина Тогда
		РежимУстановки = РежимУстановкиПакетов.Локально;
	КонецЕсли;
	
	ЦелевойКаталог = Неопределено;

	Если ЗначениеЗаполнено(ЗначенияПараметров["-dest"]) Тогда
		ЦелевойКаталог = ЗначенияПараметров["-dest"];
	КонецЕсли;

	Если РежимУстановки = РежимУстановкиПакетов.Локально Тогда
		Лог = Логирование.ПолучитьЛог(ПараметрыСистемыOpm.ИмяЛогаСистемы());
		Лог.Предупреждение("При локальной установке параметр -dest игнорируется");
		ЦелевойКаталог = Неопределено;
	КонецЕсли;

	Если ЗначенияПараметров["-all"] Тогда
		РаботаСПакетами.УстановитьВсеПакетыИзОблака(РежимУстановки, ЦелевойКаталог);
	ИначеЕсли ЗначенияПараметров["-f"] = Неопределено И ЗначенияПараметров["ИмяПакета"] = Неопределено Тогда
		РаботаСПакетами.УстановитьПакетыПоОписаниюПакета(РежимУстановки, ЦелевойКаталог);
	ИначеЕсли ЗначенияПараметров["-f"] <> Неопределено Тогда
		
		РазобранныйАдрес = СтрРазделить(ЗначенияПараметров["-f"], ПолучитьРазделительПути());
		Путь = ".";
		Маска = ЗначенияПараметров["-f"];
		Если РазобранныйАдрес.Количество() > 1 Тогда // отделим последнюю секцию как имя файла, а остальное опять соберем в строку пути
			
			Маска = РазобранныйАдрес[РазобранныйАдрес.Количество() - 1];
			РазобранныйАдрес.Удалить(РазобранныйАдрес.Количество() - 1);
			Путь = СтрСоединить(РазобранныйАдрес, ПолучитьРазделительПути());
			
		КонецЕсли;
		
		ФайлыПоМаске = НайтиФайлы(Путь, Маска);
		Для Каждого ФайлПакета Из ФайлыПоМаске Цикл
			
			РаботаСПакетами.УстановитьПакетИзФайла(ФайлПакета.ПолноеИмя, РежимУстановки, ЦелевойКаталог);
			
		КонецЦикла;
		
	Иначе
		РаботаСПакетами.УстановитьПакетИзОблака(ЗначенияПараметров["ИмяПакета"], РежимУстановки, ЦелевойКаталог);
	КонецЕсли;
	
КонецПроцедуры
